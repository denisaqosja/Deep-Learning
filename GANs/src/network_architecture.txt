<bound method Module.children of Discriminator(
  (discriminator_conv): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (1): LeakyReLU(negative_slope=0.01)
    (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (3): LeakyReLU(negative_slope=0.01)
    (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (5): LeakyReLU(negative_slope=0.01)
    (6): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2))
  )
  (discriminator_fc): Sequential(
    (0): Linear(in_features=12800, out_features=1024, bias=False)
    (1): Dropout(p=0.3, inplace=False)
    (2): Linear(in_features=1024, out_features=128, bias=False)
  )
  (sigmoid): Sigmoid()
)><bound method Module.children of Generator(
  (generator_fc): Sequential(
    (0): Linear(in_features=128, out_features=1024, bias=False)
    (1): Linear(in_features=1024, out_features=12800, bias=False)
  )
  (generator_conv): Sequential(
    (0): ConvTranspose2d(512, 256, kernel_size=(3, 3), stride=(2, 2))
    (1): LeakyReLU(negative_slope=0.01)
    (2): ConvTranspose2d(256, 128, kernel_size=(3, 3), stride=(2, 2))
    (3): LeakyReLU(negative_slope=0.01)
    (4): ConvTranspose2d(128, 64, kernel_size=(3, 3), stride=(2, 2))
    (5): LeakyReLU(negative_slope=0.01)
    (6): ConvTranspose2d(64, 3, kernel_size=(3, 3), stride=(2, 2), output_padding=(1, 1))
    (7): Conv2d(3, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (sigmoid): Sigmoid()
)>